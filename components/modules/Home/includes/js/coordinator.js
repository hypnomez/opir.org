// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    var focus_map_timer, settings_inner;
    if (!cs.home.automaidan_coord) {
      return;
    }
    settings_inner = $('.cs-home-settings-coordinator').children('div');
    settings_inner.before("<div data-uk-dropdown=\"{mode:'click'}\" class=\"uk-button-dropdown\">\n	<button type=\"button\" class=\"uk-button\">\n		<span class=\"uk-icon-caret-down\"></span> <span>Всі події</span>\n	</button>\n	<div class=\"uk-dropdown\">\n		<ul class=\"cs-home-filter-events-type uk-nav uk-nav-dropdown\">\n			<li class=\"uk-nav-header\">Відображати події</li>\n			<li data-type=\"all\">\n				<a>Всі події</a>\n			</li>\n			<li data-type=\"unconfirmed\">\n				<a>Не перевірені</a>\n			</li>\n			<li data-type=\"assigned\">\n				<a>Перевіряться</a>\n			</li>\n			<li data-type=\"confirmed\">\n				<a>Підтверджені</a>\n			</li>\n		</ul>\n	</div>\n</div>");
    $('.cs-home-filter-events-type [data-type]').click(function() {
      var $this;
      $this = $(this);
      settings_inner.attr('class', $this.data('type'));
      $this.parentsUntil('[data-uk-dropdown]').prev().find('span:last').html($this.find('a').text());
      return map.update_events(true);
    });
    focus_map_timer = 0;
    settings_inner.on('mousemove', 'li', function() {
      var $this;
      $this = $(this);
      clearTimeout(focus_map_timer);
      return focus_map_timer = setTimeout((function() {
        var location;
        location = $this.data('location').split(',');
        return map.panTo([parseFloat(location[0]), parseFloat(location[1])]);
      }), 500);
    }).on('mouseleave', 'li', function() {
      return clearTimeout(focus_map_timer);
    });
    return ymaps.ready(function() {
      var check_event, check_event_id, clusterer, refresh_delay, routes;
      refresh_delay = 5;
      clusterer = new ymaps.Clusterer({
        minClusterSize: 1000
      });
      routes = [];
      check_event_id = 0;
      (function() {
        var init;
        return init = setInterval((function() {
          var update_drivers;
          if (!window.map) {
            return;
          }
          clearInterval(init);
          map.geoObjects.add(clusterer);
          update_drivers = function() {
            $.ajax({
              url: 'api/Home/drivers',
              type: 'get',
              complete: function() {
                return setTimeout(update_drivers, refresh_delay * 1000);
              },
              success: function(drivers) {
                var driver, placemarks, _fn;
                placemarks = [];
                routes.length && map.geoObjects.remove(routes);
                routes = [];
                _fn = function(id) {
                  var event, _ref;
                  if (driver.busy) {
                    _ref = map.update_events.cache;
                    for (event in _ref) {
                      event = _ref[event];
                      if (event.assigned_to === id) {
                        ymaps.route([[driver.lat, driver.lng], [event.lat, event.lng]], {
                          avoidTrafficJams: true
                        }).then(function(route) {
                          routes.push(route);
                          route.getWayPoints().removeAll();
                          return map.geoObjects.add(route);
                        });
                        return;
                      }
                    }
                    return;
                  }
                  return placemarks[placemarks.length - 1].events.add('click', function() {
                    return check_event(id);
                  });
                };
                for (driver in drivers) {
                  driver = drivers[driver];
                  driver.busy = parseInt(driver.busy);
                  placemarks.push(new ymaps.Placemark([driver.lat, driver.lng], {}, {
                    iconLayout: 'default#image',
                    iconImageHref: '/components/modules/Home/includes/img/driver.png',
                    iconImageSize: [40, 38],
                    iconImageOffset: [-16, -38],
                    iconImageClipRect: [[40 * driver.busy, 0], [40 * (driver.busy + 1), 38]]
                  }));
                  _fn(driver.id);
                }
                clusterer.removeAll();
                clusterer.add(placemarks);
                (function() {
                  var category_name, confirmed, event, events_stream_panel_content, settings_panel_content, _ref;
                  settings_panel_content = '';
                  events_stream_panel_content = '';
                  _ref = map.update_events.cache;
                  for (event in _ref) {
                    event = _ref[event];
                    category_name = cs.home.categories[event.category].name;
                    confirmed = event.confirmed ? 'confirmed' : (event.assigned_to ? 'assigned' : 'unconfirmed');
                    settings_panel_content += ("<li class=\"" + confirmed + "\" data-location=\"" + event.lat + "," + event.lng + "\">\n	<img src=\"/components/modules/Home/includes/img/" + event.category + ".png\" alt=\"\">\n	<h2>" + category_name + " <span>(додав " + event.user_login + ")</span></h2>") + (event.confirmed_login ? "підтвердив " + event.confirmed_login : (event.assigned_login ? "їде перевіряти " + event.assigned_login : '')) + "</li>";
                    events_stream_panel_content += ("<li data-location=\"" + event.lat + "," + event.lng + "\">\n	<img src=\"/components/modules/Home/includes/img/" + event.category + ".png\" alt=\"\">\n	<h2>" + category_name + "</span></h2>") + (event.confirmed_login ? "підтвердив " + event.confirmed_login : (event.assigned_login ? "їде перевіряти " + event.assigned_login : '')) + "</li>";
                  }
                  return settings_inner.html("<ul>" + settings_panel_content + "</ul>");
                })();
              }
            });
          };
          update_drivers();
          return cs.home.delete_event = function(id) {
            if (!confirm('Точно видалити?')) {
              return;
            }
            $.ajax({
              url: "api/Home/events/" + id,
              type: 'delete',
              success: function() {
                update_drivers();
              }
            });
          };
        }), 100);
      })();
      $('#map').on('click', '.cs-home-check-assign', function() {
        check_event_id = $(this).data('id');
        return alert('Тепер оберіть вільного водія поблизу (синього кольору)');
      });
      return check_event = function(driver) {
        if (!check_event_id) {
          return;
        }
        return $.ajax({
          url: "api/Home/events/" + check_event_id + "/check",
          data: {
            driver: driver
          },
          type: 'post',
          success: function() {
            map.balloon.close();
            check_event_id = 0;
            return alert('Водій отримав повідомлення про перевірку');
          }
        });
      };
    });
  });

}).call(this);
